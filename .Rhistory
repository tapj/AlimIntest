order(monde[comb[sample(1:dim(comb)[1]),]])
order(monde[comb[sample(1:dim(comb)[1]),]])
order(monde[comb[sample(1:dim(comb)[1]),]])
order(monde[comb[sample(1:dim(comb)[1]),]])
order(monde[comb[sample(1:dim(comb)[1]),]])
order(monde[comb[sample(1:dim(comb)[1]),]])
order(monde[comb[sample(1:dim(comb)[1]),]])
Cerveau=function(position=NULL, puissance, monde=MONDE,espece=NULL, bestiaire=BESTIAIRE ) {
x=position[1]
y=position[2]
if(bestiaire[[espece]]$cerveau.methode=="alea"){
x_direction=sample(c(-1,0,1),1)
y_direction=sample(c(-1,0,1),1)
# le cerveau verifie s'il n'est pas au bord du monde
if(x==1) {x_direction=1}
if(y==1) {y_direction=1}
if(x==dim(monde)[1]) {x_direction=-1 }
if(y==dim(monde)[2]) {y_direction=-1}
direction=c(x_direction,y_direction)
nouvelle_position = position+ direction*puissance
}
if( bestiaire[[espece]]$cerveau.methode=="radius") {
xx=x + c(-c(1:puissance),c(1:puissance))
yy=y + c(-c(1:puissance),c(1:puissance))
# xx=xx[!xx<1 & !xx>dim(monde)[1]]
# yy=yy[!yy<1 & !yy>dim(monde)[2]]
xx[xx<1]<-1
xx[xx>dim(monde)[1]]<-dim(monde)[1]
yy[yy<1]<-1
yy[yy>dim(monde)[2]]<-dim(monde)[2]
comb=NULL
for(i in 1:(length(xx)-1)) {
for (j in i:length(yy)) {
comb=rbind(comb,c(xx[i],yy[j]))
}
}
# x_2=comb[rev(order(monde[comb]))[1],1]
# y_2=comb[rev(order(monde[comb]))[1],2]
comb=comb[sample(1:dim(comb)[1]),]
#mettre un peu de flexibilite dans le choix (à ameliorer)
# if(dim(comb)[1]>4) {
# a=sample(1:3,1)
# } else {
# a=sample(1:2,1)
# }
x_2=comb[rev(order(monde[comb]))[a],1]
y_2=comb[rev(order(monde[comb]))[a],2]
nouvelle_position=c(x_2,y_2)
}
return(nouvelle_position) # x,y
}
MONDE_0=matrix(sample(c(rep(0,0),5,5), 2500, replace=T), nc=50)
#MONDE_0=r[,,1]
#BESTIAIRE=list(especeA, especeB)
especeA=list(nom="especeA", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.10, symbol.pch=15)
especeB=list(nom="especeB", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.10, symbol.pch=16)
especeC=list(nom="especeC", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.20, symbol.pch=17)
BESTIAIRE=list(especeA=especeA, especeB=especeB, especeC=especeC)
#BESTIOLES (il faudrait creer un generateur ici)
#reserves_energie = list of vector
# especes = types d'especes, vector
# nb = vector
#A=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeA)
#B=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeB)
#C=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeC)
Bestioles.generateur=function(reserves_energie, especes, nb, monde=MONDE){
if(length(especes)!=length(nb)) stop("le nombre d'especes ne correspond pas")
bestioles=sample(rep(especes,nb), sum(nb), replace=F)
if(!is.list(reserves_energie)) stop ("reserve energie doit etre une liste")
BESTIOLES=vector("list", sum(nb))
for( i in 1:sum(nb)){
position=c(sample(1:dim(monde)[1],1),sample(1:dim(monde)[2],1))
reserve_energie=sample(reserves_energie[[bestioles[i]]],1)
BESTIOLES[[i]]=list(position=position, reserves_energie=reserve_energie,espece=bestioles[i], nourriture.dispo=monde[position[1],position[2]], vie=TRUE)
}
return(BESTIOLES)
}
### MAIN ###
MONDE=MONDE_0
BESTIOLES=Bestioles.generateur(reserves_energie=list(especeA=c(10,10),especeB=c(10,10),especeC=c(10,10)), especes=c("especeA","especeB","especeC"), nb=c(30,30,30))
image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
for (bestiole in 1:length(BESTIOLES)) {
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
}
for(i in 1:60){
vivant.tot=length(which(sapply(BESTIOLES,function(x) {return(x$vie)})==TRUE))
especes=sapply(BESTIOLES,function(x) {return(x$espece)})
vivant=sapply(BESTIOLES,function(x) {return(x$vie)})
cat(i, "sec","   ","nourriture totale=",sum(MONDE), "bestioles vivantes=",vivant.tot, "details=", table((vivant),(especes)), "\n")
if(vivant.tot==0) stop("toutes les bestioles sont mortes")
flush.console()
for ( bestiole in 1:length(BESTIOLES)) {
BESTIOLES[[bestiole]]=BestioleReacteur(position=BESTIOLES[[bestiole]]$position, reserves_energie=BESTIOLES[[bestiole]]$reserves_energie, espece=BESTIOLES[[bestiole]]$espece, monde=MONDE, vie=BESTIOLES[[bestiole]]$vie)
MONDE[BESTIOLES[[bestiole]]$position[1],BESTIOLES[[bestiole]]$position[2]] = BESTIOLES[[bestiole]]$nourriture.dispo
}
#MONDE=Monde(MONDE,BESTIOLES)
#image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
image(x=1:dim(MONDE)[1],y=1:dim(MONDE)[2],z=MONDE, zlim=c(0,max(MONDE_0)), add=TRUE, xlab="", ylab="", xaxt="n", yaxt="n")
for (bestiole in 1:length(BESTIOLES)) {
if(BESTIOLES[[bestiole]]$vie){
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
} else {next}
}
i=i+1
Sys.sleep(1)
}
cat("\n")
MONDE_0=matrix(sample(c(rep(0,0),5,5), 2500, replace=T), nc=50)
#MONDE_0=r[,,1]
#BESTIAIRE=list(especeA, especeB)
especeA=list(nom="especeA", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.10, symbol.pch=15)
especeB=list(nom="especeB", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.10, symbol.pch=16)
especeC=list(nom="especeC", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.20, symbol.pch=17)
BESTIAIRE=list(especeA=especeA, especeB=especeB, especeC=especeC)
#BESTIOLES (il faudrait creer un generateur ici)
#reserves_energie = list of vector
# especes = types d'especes, vector
# nb = vector
#A=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeA)
#B=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeB)
#C=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeC)
Bestioles.generateur=function(reserves_energie, especes, nb, monde=MONDE){
if(length(especes)!=length(nb)) stop("le nombre d'especes ne correspond pas")
bestioles=sample(rep(especes,nb), sum(nb), replace=F)
if(!is.list(reserves_energie)) stop ("reserve energie doit etre une liste")
BESTIOLES=vector("list", sum(nb))
for( i in 1:sum(nb)){
position=c(sample(1:dim(monde)[1],1),sample(1:dim(monde)[2],1))
reserve_energie=sample(reserves_energie[[bestioles[i]]],1)
BESTIOLES[[i]]=list(position=position, reserves_energie=reserve_energie,espece=bestioles[i], nourriture.dispo=monde[position[1],position[2]], vie=TRUE)
}
return(BESTIOLES)
}
### MAIN ###
MONDE=MONDE_0
BESTIOLES=Bestioles.generateur(reserves_energie=list(especeA=c(10,10),especeB=c(10,10),especeC=c(10,10)), especes=c("especeA","especeB","especeC"), nb=c(30,30,30))
image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
for (bestiole in 1:length(BESTIOLES)) {
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
}
for(i in 1:60){
vivant.tot=length(which(sapply(BESTIOLES,function(x) {return(x$vie)})==TRUE))
especes=sapply(BESTIOLES,function(x) {return(x$espece)})
vivant=sapply(BESTIOLES,function(x) {return(x$vie)})
cat(i, "sec","   ","nourriture totale=",sum(MONDE), "bestioles vivantes=",vivant.tot, "details=", table((vivant),(especes)), "\n")
if(vivant.tot==0) stop("toutes les bestioles sont mortes")
flush.console()
for ( bestiole in 1:length(BESTIOLES)) {
BESTIOLES[[bestiole]]=BestioleReacteur(position=BESTIOLES[[bestiole]]$position, reserves_energie=BESTIOLES[[bestiole]]$reserves_energie, espece=BESTIOLES[[bestiole]]$espece, monde=MONDE, vie=BESTIOLES[[bestiole]]$vie)
MONDE[BESTIOLES[[bestiole]]$position[1],BESTIOLES[[bestiole]]$position[2]] = BESTIOLES[[bestiole]]$nourriture.dispo
}
#MONDE=Monde(MONDE,BESTIOLES)
#image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
image(x=1:dim(MONDE)[1],y=1:dim(MONDE)[2],z=MONDE, zlim=c(0,max(MONDE_0)), add=TRUE, xlab="", ylab="", xaxt="n", yaxt="n")
for (bestiole in 1:length(BESTIOLES)) {
if(BESTIOLES[[bestiole]]$vie){
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
} else {next}
}
i=i+1
Sys.sleep(1)
}
cat("\n")
Cerveau=function(position=NULL, puissance, monde=MONDE,espece=NULL, bestiaire=BESTIAIRE ) {
x=position[1]
y=position[2]
if(bestiaire[[espece]]$cerveau.methode=="alea"){
x_direction=sample(c(-1,0,1),1)
y_direction=sample(c(-1,0,1),1)
# le cerveau verifie s'il n'est pas au bord du monde
if(x==1) {x_direction=1}
if(y==1) {y_direction=1}
if(x==dim(monde)[1]) {x_direction=-1 }
if(y==dim(monde)[2]) {y_direction=-1}
direction=c(x_direction,y_direction)
nouvelle_position = position+ direction*puissance
}
if( bestiaire[[espece]]$cerveau.methode=="radius") {
xx=x + c(-c(1:puissance),c(1:puissance))
yy=y + c(-c(1:puissance),c(1:puissance))
# xx=xx[!xx<1 & !xx>dim(monde)[1]]
# yy=yy[!yy<1 & !yy>dim(monde)[2]]
xx[xx<1]<-1
xx[xx>dim(monde)[1]]<-dim(monde)[1]
yy[yy<1]<-1
yy[yy>dim(monde)[2]]<-dim(monde)[2]
comb=NULL
for(i in 1:(length(xx)-1)) {
for (j in i:length(yy)) {
comb=rbind(comb,c(xx[i],yy[j]))
}
}
# x_2=comb[rev(order(monde[comb]))[1],1]
# y_2=comb[rev(order(monde[comb]))[1],2]
comb=comb[sample(1:dim(comb)[1]),]
#mettre un peu de flexibilite dans le choix (à ameliorer)
# if(dim(comb)[1]>4) {
# a=sample(1:3,1)
# } else {
# a=sample(1:2,1)
# }
x_2=comb[rev(order(monde[comb]))[1],1]
y_2=comb[rev(order(monde[comb]))[1],2]
nouvelle_position=c(x_2,y_2)
}
return(nouvelle_position) # x,y
}
MONDE_0=matrix(sample(c(rep(0,0),5,5), 2500, replace=T), nc=50)
#MONDE_0=r[,,1]
#BESTIAIRE=list(especeA, especeB)
especeA=list(nom="especeA", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.10, symbol.pch=15)
especeB=list(nom="especeB", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.10, symbol.pch=16)
especeC=list(nom="especeC", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.20, symbol.pch=17)
BESTIAIRE=list(especeA=especeA, especeB=especeB, especeC=especeC)
#BESTIOLES (il faudrait creer un generateur ici)
#reserves_energie = list of vector
# especes = types d'especes, vector
# nb = vector
#A=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeA)
#B=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeB)
#C=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeC)
Bestioles.generateur=function(reserves_energie, especes, nb, monde=MONDE){
if(length(especes)!=length(nb)) stop("le nombre d'especes ne correspond pas")
bestioles=sample(rep(especes,nb), sum(nb), replace=F)
if(!is.list(reserves_energie)) stop ("reserve energie doit etre une liste")
BESTIOLES=vector("list", sum(nb))
for( i in 1:sum(nb)){
position=c(sample(1:dim(monde)[1],1),sample(1:dim(monde)[2],1))
reserve_energie=sample(reserves_energie[[bestioles[i]]],1)
BESTIOLES[[i]]=list(position=position, reserves_energie=reserve_energie,espece=bestioles[i], nourriture.dispo=monde[position[1],position[2]], vie=TRUE)
}
return(BESTIOLES)
}
### MAIN ###
MONDE=MONDE_0
BESTIOLES=Bestioles.generateur(reserves_energie=list(especeA=c(10,10),especeB=c(10,10),especeC=c(10,10)), especes=c("especeA","especeB","especeC"), nb=c(30,30,30))
image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
for (bestiole in 1:length(BESTIOLES)) {
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
}
for(i in 1:60){
vivant.tot=length(which(sapply(BESTIOLES,function(x) {return(x$vie)})==TRUE))
especes=sapply(BESTIOLES,function(x) {return(x$espece)})
vivant=sapply(BESTIOLES,function(x) {return(x$vie)})
cat(i, "sec","   ","nourriture totale=",sum(MONDE), "bestioles vivantes=",vivant.tot, "details=", table((vivant),(especes)), "\n")
if(vivant.tot==0) stop("toutes les bestioles sont mortes")
flush.console()
for ( bestiole in 1:length(BESTIOLES)) {
BESTIOLES[[bestiole]]=BestioleReacteur(position=BESTIOLES[[bestiole]]$position, reserves_energie=BESTIOLES[[bestiole]]$reserves_energie, espece=BESTIOLES[[bestiole]]$espece, monde=MONDE, vie=BESTIOLES[[bestiole]]$vie)
MONDE[BESTIOLES[[bestiole]]$position[1],BESTIOLES[[bestiole]]$position[2]] = BESTIOLES[[bestiole]]$nourriture.dispo
}
#MONDE=Monde(MONDE,BESTIOLES)
#image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
image(x=1:dim(MONDE)[1],y=1:dim(MONDE)[2],z=MONDE, zlim=c(0,max(MONDE_0)), add=TRUE, xlab="", ylab="", xaxt="n", yaxt="n")
for (bestiole in 1:length(BESTIOLES)) {
if(BESTIOLES[[bestiole]]$vie){
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
} else {next}
}
i=i+1
Sys.sleep(1)
}
cat("\n")
MONDE_0=matrix(sample(c(rep(0,0),0:5), 2500, replace=T), nc=50)
#MONDE_0=r[,,1]
#BESTIAIRE=list(especeA, especeB)
especeA=list(nom="especeA", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.20, symbol.pch=15)
especeB=list(nom="especeB", cerveau.methode="radius", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.20, symbol.pch=16)
especeC=list(nom="especeC", cerveau.methode="alea", estomac=list(methode="glouton", glouton=list(energie=0.50, reserve=0.40, dechet=0.10)), pattes.methode="rendement", pattes.rendement=0.20, symbol.pch=17)
BESTIAIRE=list(especeA=especeA, especeB=especeB, especeC=especeC)
#BESTIOLES (il faudrait creer un generateur ici)
#reserves_energie = list of vector
# especes = types d'especes, vector
# nb = vector
#A=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeA)
#B=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeB)
#C=list(position=c(sample(1:dim(MONDE_0)[1],1),sample(1:dim(MONDE_0)[2],1)), reserve_energie=100,espece=especeC)
Bestioles.generateur=function(reserves_energie, especes, nb, monde=MONDE){
if(length(especes)!=length(nb)) stop("le nombre d'especes ne correspond pas")
bestioles=sample(rep(especes,nb), sum(nb), replace=F)
if(!is.list(reserves_energie)) stop ("reserve energie doit etre une liste")
BESTIOLES=vector("list", sum(nb))
for( i in 1:sum(nb)){
position=c(sample(1:dim(monde)[1],1),sample(1:dim(monde)[2],1))
reserve_energie=sample(reserves_energie[[bestioles[i]]],1)
BESTIOLES[[i]]=list(position=position, reserves_energie=reserve_energie,espece=bestioles[i], nourriture.dispo=monde[position[1],position[2]], vie=TRUE)
}
return(BESTIOLES)
}
### MAIN ###
MONDE=MONDE_0
BESTIOLES=Bestioles.generateur(reserves_energie=list(especeA=c(10,10),especeB=c(10,10),especeC=c(10,10)), especes=c("especeA","especeB","especeC"), nb=c(30,30,30))
image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
for (bestiole in 1:length(BESTIOLES)) {
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
}
for(i in 1:60){
vivant.tot=length(which(sapply(BESTIOLES,function(x) {return(x$vie)})==TRUE))
especes=sapply(BESTIOLES,function(x) {return(x$espece)})
vivant=sapply(BESTIOLES,function(x) {return(x$vie)})
cat(i, "sec","   ","nourriture totale=",sum(MONDE), "bestioles vivantes=",vivant.tot, "details=", table((vivant),(especes)), "\n")
if(vivant.tot==0) stop("toutes les bestioles sont mortes")
flush.console()
for ( bestiole in 1:length(BESTIOLES)) {
BESTIOLES[[bestiole]]=BestioleReacteur(position=BESTIOLES[[bestiole]]$position, reserves_energie=BESTIOLES[[bestiole]]$reserves_energie, espece=BESTIOLES[[bestiole]]$espece, monde=MONDE, vie=BESTIOLES[[bestiole]]$vie)
MONDE[BESTIOLES[[bestiole]]$position[1],BESTIOLES[[bestiole]]$position[2]] = BESTIOLES[[bestiole]]$nourriture.dispo
}
#MONDE=Monde(MONDE,BESTIOLES)
#image(x=1:dim(MONDE_0)[1],y=1:dim(MONDE_0)[2],z=MONDE_0, zlim=c(0,max(MONDE_0)), xlab="", ylab="", xaxt="n", yaxt="n", bty="n")
image(x=1:dim(MONDE)[1],y=1:dim(MONDE)[2],z=MONDE, zlim=c(0,max(MONDE_0)), add=TRUE, xlab="", ylab="", xaxt="n", yaxt="n")
for (bestiole in 1:length(BESTIOLES)) {
if(BESTIOLES[[bestiole]]$vie){
points(BESTIOLES[[bestiole]]$position[1], BESTIOLES[[bestiole]]$position[2], cex=2, pch=BESTIAIRE[[BESTIOLES[[bestiole]]$espece]]$symbol.pch)
} else {next}
}
i=i+1
Sys.sleep(1)
}
cat("\n")
?file.exists
q()
library(devtools); load_all(); build_vignettes()
library(devtools); load_all(); build_vignettes()
getwd()
sanger.454 = read.table("data-raw/sanger_vs_454.classifier.total", sep="\t")
sanger.454 = read.table("data-raw/sanger_vs_454.classifier.total", sep="\t")
head(sanger.454)
levels(sanger.454$V1)
technology = sanger.454$V1
levels(technology)
levels(technology) = c("Sanger","454seq","454seq","454seq","454seq")
table(sanger.454$V1)
run = sanger.454$V1
levels(run) = c("full","1/16 lanes with 12 MID","1/8 lanes 12 MID","1/8 lanes 24 MID", "1/16 lanes 8 MID")
levels(sanger.454$V1)
samples = sanger.454$V1
LETTER
LETTERS
levels(samples) = LETTERS[1:5]
sanger.454 = cbind(samples, technology, run, sanger.454$V2, sanger.454$V3)
colnames(sanger.454)
colnames(sanger.454) = c("samples","technology","run","tax","conf")
write.csv2(sanger.454, file="data-raw/sanger.454.csv")
genos.cogenics = read.table("data-raw/cogenics_vs_genoscreen.classifier.total", sep="\t")
head(genos.cogenics)
levels(genos.cogenics$V1)
table(genos.cogenics$V1)
samples = company = genos.cogenics$V1
levels(samples) = c("100","100","126","126","151","151","163","163","175","175","79","79","96","96","99","99")
rep( c("A","B"),8)
company = rep( c("A","B"),8)
replicat454 = cbind(samples, company, genos.cogenics[,2:3])
company = genos.cogenics$V1
levels(company) = rep( c("A","B"),8)
replicat454 = cbind(samples, company, genos.cogenics[,2:3])
colnames(replicat454)
colnames(replicat454) = c("samples", "manufacturer", "tax" , "conf")
write.csv2(replicat454, file="data-raw/replicat.454.csv")
sanger_454   = read.csv2("data-raw/sanger.454.csv",   header = TRUE)
replicat_454 = read.csv2("data-raw/replicat.454.csv", header = TRUE)
library(reshape2)
head(cast(sanger_454))
library(reshape)
?reshape2
??reshape2
??reshape2
help(reshape2)
install.packages("reshape2")
unload(reshape2)
q()
ls()
head(replicat_454)
head(sanger.454)
head(sanger_454)
sanger.454 = read.table("data-raw/sanger_vs_454.classifier.total", sep="\t")
technology = sanger.454$V1; levels(technology) = c("Sanger","454seq","454seq","454seq","454seq")
run = sanger.454$V1; levels(run) = c("full","1/16 lanes with 12 MID","1/8 lanes 12 MID","1/8 lanes 24 MID", "1/16 lanes 8 MID")
samples = sanger.454$V1; levels(samples) = LETTERS[1:5]
sanger.454 = cbind(samples, technology, run, sanger.454$V2, sanger.454$V3)
head(sanger.454)
sanger.454 = data.frame(samples, technology, run, sanger.454$V2, sanger.454$V3)
sanger.454 = data.frame(samples, technology, run, tax=sanger.454$V2, conf=sanger.454$V3)
 tmp = data.frame(samples, technology, run, tax=sanger.454$V2, conf=sanger.454$V3)
head(sanger.454)
sanger.454 = read.table("data-raw/sanger_vs_454.classifier.total", sep="\t")
technology = sanger.454$V1; levels(technology) = c("Sanger","454seq","454seq","454seq","454seq")
run = sanger.454$V1; levels(run) = c("full","1/16 lanes with 12 MID","1/8 lanes 12 MID","1/8 lanes 24 MID", "1/16 lanes 8 MID")
samples = sanger.454$V1; levels(samples) = LETTERS[1:5]
head(data.frame(samples, technology, run, tax=sanger.454$V2, conf=sanger.454$V3))
sanger_454 = data.frame(samples, technology, run, tax=sanger.454$V2, conf=sanger.454$V3)
write.csv2(sanger_454, file="data-raw/sanger_454.csv")
write.csv2(sanger_454, file="data-raw/sanger.454.csv")
q()
ls()
richness.before
jsd
microbial.change
data.frame(microbial.change,group)
boxplot(data.frame(microbial.change,group)$jsd~group)
pairwise.wilcox.test(data.frame(microbial.change,group)$jsd,group)
pairwise.wilcox.test(data.frame(microbial.change,group)$jsd,group, p.adjust="none")
pairwise.wilcox.test(data.frame(microbial.change,group)$jsd,data.frame(microbial.change,group)$change, p.adjust="none")
pairwise.wilcox.test(data.frame(microbial.change,group)$jsd,group, p.adjust="none", paired=T)
pairwise.wilcox.test(data.frame(microbial.change,group)$jsd,data.frame(microbial.change,group)$change, p.adjust="none", paired=T)
ls()
metadata76[7:14]
metadata76$richness
cor(metadata76$richness, metadata76[7:14], method="spearman")
cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman")
cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="pearson")
cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman")
library(ggplot2)
library(ade4)
cor(metadata76$richness[-c(50,70)],as.data.frame(t(log10(noise.removal(microbiota_tax$genus_tax, percent=1)[,-attr(na.omit(metadata76[7:14]),"na.action")] + 10^-5))))
library(BiotypeR)
cor(metadata76$richness[-c(50,70)],as.data.frame(t(log10((microbiota_tax$genus_tax, percent=1)[,-attr(na.omit(metadata76[7:14]),"na.action")] + 10^-5))))
cor(metadata76$richness[-c(50,70)],as.data.frame(t(log10((microbiota_tax$genus_tax)[,-attr(na.omit(metadata76[7:14]),"na.action")] + 10^-5))))
sort(cor(metadata76$richness[-c(50,70)],as.data.frame(t(log10((microbiota_tax$genus_tax)[,-attr(na.omit(metadata76[7:14]),"na.action")] + 10^-5)))))
order(cor(metadata76$richness[-c(50,70)],as.data.frame(t(log10((microbiota_tax$genus_tax)[,-attr(na.omit(metadata76[7:14]),"na.action")] + 10^-5)))))
cor(metadata76$richness[-c(50,70)],as.data.frame(t(log10((microbiota_tax$genus_tax)[,-attr(na.omit(metadata76[7:14]),"na.action")] + 10^-5))))
cor(metadata76$richness[-c(50,70)],as.data.frame(t(log10((microbiota_tax$genus_tax)[-1,-attr(na.omit(metadata76[7:14]),"na.action")] + 10^-5))))
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax) + 10^-5))))
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))))
sort(cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5)))))
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")
sort(cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman"))
q()
library(devtools)
user=Sys.info()[["user"]]
require(rmarkdown)
require(markdown)
library(ade4)
library(RColorBrewer)
library(BiotypeR)
library(gridExtra)
library(reshape2)
library(vegan)
library(knitr)
library(ggplot2)
library(scales)
library(dplyr)
#source("src/mclapply.hack.R")
build()
install()
build_vignettes()
plot(genus.scfa.coi)
plot(genus.scfa.coi)
genus.scfa.coi
tes
test
unclass(genus.scfa.coi)
s.cocircle(genus.scfa.coi$co)
s.corcircle(genus.scfa.coi$co)
s.corcircle(genus.scfa.coi$li)
s.corcircle(genus.scfa.coi$l1)
s.corcircle(genus.scfa.coi$li)
s.corcircle(genus.scfa.coi$co, add=T)
cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman")
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")
data.frame(t(genus.scfa.coi$co[1:2]), t(genus.scfa.coi$li)[1:2])
genus.scfa.coi$co
genus.scfa.coi$co[1:2]
t(genus.scfa.coi$co[1:2])
data.frame(genus.scfa.coi$co[1:2], richness.cor=cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman"))
data.frame(genus.scfa.coi$co[1:2], richness.cor=t(cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman")))
scfa.richness.cor = data.frame(genus.scfa.coi$co[1:2], richness.cor=t(cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman")))
genus.richness.cor = data.frame(genus.scfa.coi$co[-1,1:2], richness.cor=t(cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman")))
genus.richness.cor = data.frame(genus.scfa.coi$co[-1,1:2], richness.cor=t(cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")))
data.frame(genus.scfa.coi$co[-1,1:2], richness.cor=t(cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")))
data.frame(genus.scfa.coi$li[-1,1:2], richness.cor=t(cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")))
genus.scfa.coi$li[-1,1:2]
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")[row.names(genus.scfa.coi$li[-1,1:2])]
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")[[row.names(genus.scfa.coi$li[-1,1:2])]]
cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")[,row.names(genus.scfa.coi$li[-1,1:2])]
genus.richness.cor = data.frame(genus.scfa.coi$li[-1,1:2],
richness.cor=cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")[,row.names(genus.scfa.coi$li[-1,1:2])])
colnames(genus.richness.cor) = colnames(scfa.richness.cor)
scfa.richness.cor = data.frame(genus.scfa.coi$co[1:2], richness.cor=t(cor(metadata76$richness[-c(50,70)], metadata76[-c(50,70),7:14], method="spearman")))
genus.richness.cor = data.frame(genus.scfa.coi$li[-1,1:2],
richness.cor=cor(metadata76$richness,as.data.frame(t(log10((microbiota_tax$genus_tax[-1,]) + 10^-5))), method="spearman")[,row.names(genus.scfa.coi$li[-1,1:2])])
colnames(genus.richness.cor) = colnames(scfa.richness.cor)
genus.scfa.richness.cor = cbind(scfa.richness.cor, genus.richness.cor)
genus.scfa.richness.cor = rbind(scfa.richness.cor, genus.richness.cor)
ggplot(genus.scfa.richness.cor) + geom_text(aes(x=Comp1, y=Comp2, label=row.names(genus.scfa.richness.cor), col=richness.cor)
)
ggplot(genus.scfa.richness.cor) + geom_text(aes(x=Comp1, y=Comp2, label=row.names(genus.scfa.richness.cor), col=richness.cor)) + xlim(-1,1) + ylim(-1,1)
ggplot(genus.scfa.richness.cor) + geom_text(aes(x=Comp1, y=Comp2, label=row.names(genus.scfa.richness.cor), col=richness.cor)) + scale_color_manual("spearman correlation\with microbiota richness")
ggplot(genus.scfa.richness.cor) + geom_text(aes(x=Comp1, y=Comp2, label=row.names(genus.scfa.richness.cor), col=richness.cor)) + scale_color_manual("spearman correlation\nwith microbiota richness")
ggplot(genus.scfa.richness.cor) + geom_text(aes(x=Comp1, y=Comp2, label=row.names(genus.scfa.richness.cor), col=richness.cor)) + scale_color("spearman correlation\nwith microbiota richness")
ggplot(genus.scfa.richness.cor) + geom_text(aes(x=Comp1, y=Comp2, label=row.names(genus.scfa.richness.cor), col=richness.cor)) + scale_color_gradient("spearman correlation\nwith microbiota richness")
?scale_color_gradient
p3 = ggplot(genus.scfa.richness.cor) + geom_text(aes(x=Comp1, y=Comp2, label=row.names(genus.scfa.richness.cor), col=richness.cor))
p3 + scale_colour_gradient(limits=c(3, 4), low="red", high="white", space="Lab")
p3 + scale_colour_gradient( low="red", high="white", space="Lab")
p3 + scale_colour_gradient( low="red", high="green", space="Lab")
p3 + scale_colour_gradient(limits=c(-0.5, 0.5), low="red", high="green", space="Lab")
p3 + scale_colour_gradient(limits=c(-0.6, 0.6), low="red", high="green", space="Lab")
p3 + scale_colour_gradient("spearman correlation\with microbiota richness", limits=c(-0.6, 0.6), low="red", high="green", space="Lab")
p3 + scale_colour_gradient("spearman correlation\nwith microbiota richness", limits=c(-0.6, 0.6), low="red", high="green", space="Lab")
p3 + scale_colour_gradient("Spearman correlation\nwith microbiota richness", limits=c(-0.6, 0.6), low="red", high="green", space="Lab")
dev.size()
dev.size()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
getwd()
q()
